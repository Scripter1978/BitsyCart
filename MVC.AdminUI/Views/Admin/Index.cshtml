@model Infrastructure.Models.PublicModel

@{
    ViewBag.Title = "title";
    Layout = "_LayoutAdminGeneric";
}

<style>
    .container {
        margin: 20px auto;
        max-width: 640px;
    }

    img {
        max-width: 100%;
    }

    .cropper-view-box,
    .cropper-face {
        border-radius: 50%;
    }

    /* The css styles for `outline` do not follow `border-radius` on iOS/Safari (#979). */
    .cropper-view-box {
        outline: 0;
        box-shadow: 0 0 0 1px #39f;
    }
</style>
<div class="cards" style="padding: 5px; margin: 5px;">
    <fieldset style="border-style: dotted; border-color: black; border-width: 1px; padding: 10px;">
        <legend align="center" style="float: none; width: unset; font-size: 10px;">
            Add/Edit Profile Image
        </legend>
        <div id="result" style="width: 200px; height: 200px; margin: 0 auto;">
            <label class="label" data-toggle="tooltip" title="Change your avatar">
                <img class="rounded" id="avatar" src="@Model.Image" alt="avatar">
                <input type="file" class="sr-only" id="input" name="image" accept="image/*">
            </label>
            <div class="progress">
                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
            </div>
            <div class="alert" role="alert"></div>
        </div>
    </fieldset>

    <div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">Crop the image</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="img-container">
                        <img id="image" width="200" height="200" src="@Model.Image">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="crop">Crop</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="cards" style="padding: 5px; margin: 5px; color: @Model.Style.BioFontColor; font-family: @Model.Style.BioFontType">
    <fieldset id="biofield" style="border-style: dotted; border-color: black; border-width: 1px; padding: 10px;">
        <legend align="center" style="float: none; width: unset; font-size: 10px;">
            Add/Edit Bio
        </legend>
        <input type="text" title="Bio Text" placeholder="Enter Bio Here" maxlength="256" class="form-control" id="bio">@Model.Bio.Body</input>
    </fieldset>
</div>
<div class="cards" style="padding: 5px; margin: 5px;">
    <fieldset style="border-style: dotted; border-color: black; border-width: 1px; padding: 10px;">
        <legend align="center" style="float: none; width: unset; font-size: 10px;">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#AddSocialModal" data-bs-whatever="@@mdo">Add Social</button>
        </legend>
        <div class="cards">
            <div class="card-link sociallinks" style="height: 45px;">
                @foreach (var item in Model.SocialLinks)
                {
                    var linkid = item.Name.ToLower() + "link"; 
                    <div id="@linkid" style="width: 40px; height: 40px; display: inline-block;">
                        <button onclick="deleteSocialLink(this)" class="btn deleteSocial" type="button" id="@item.Id" style="position: absolute; ">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="red" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293z"/>
                            </svg>
                        </button>
                        <div title="@item.Url" class="card-links social-link">

                            <div class="align-self-md-auto" style="color: @Model.Style.SocialFontColor">
                                @Html.Raw(item.Icon)
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </fieldset>
</div>
<div class="cards" style="padding: 5px; margin: 5px;">
    <fieldset style="border-style: dotted; border-color: black; border-width: 1px; padding: 10px;">
        <legend align="center" style="float: none; width: unset; font-size: 10px;">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#AddUrlModal" data-bs-whatever="@@mdo">Add Link</button>
        </legend>
 
        <div class="mx-auto w-75 urllinks">

            @foreach (var item in Model.Links)
            {
                var id = $"{item.Id}_link";
                <div class="d-flex flex-column @id">

                    <div class="card-links-a v-48" style="border-color: @Model.Style.LinkBorderColor;  position: relative; overflow: visible;">
                        <button onclick="deleteLink(this)" class="btn deletelink" type="button" id="@item.Id" style="position: absolute; top: -2vh; right: -3vh; ">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="red" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293z"/>
                            </svg>
                        </button>
                        <a class="btn w-100" href="@item.Url" style="color: @Model.Style.LinkFontColor">@item.Name</a>
                    </div>
                </div>
            }
        </div>
    </fieldset>
</div>


<div class="modal fade" id="AddSocialModal" tabindex="-1" aria-labelledby="AddSocialModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div id="socialsearch">

                    <div>
                        <input id="SearchSocial" onkeyup="socialFilter()" placeholder="Type Name of Socialmedia Site" />
                    </div>

                    <div>
                        <button type="button" class="btn" id="socialbtn">Save</button>
                    </div>
                    <div class="results">
                        <div class="socialIcons" id="xtwitter" style="display: none;">
                            <span title="X (formerly Twitter)">
                                <svg viewBox="0 0 24 24" aria-hidden="true" fill="black" class="" height="24" width="24">
                                    <g>
                                        <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"></path>
                                    </g>
                                </svg>
                            </span>
                            <input name="socialinput" type="text" id="twittername" placeholder="Enter X username"/>
                        </div>
                        <div class="socialIcons" id="linkedin" style="display: none;">
                            <span title="LinkedIn">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-supported-dps="24x24" fill="currentColor" class="mercado-match" width="24" height="24" focusable="false">
                                    <path d="M20.5 2h-17A1.5 1.5 0 002 3.5v17A1.5 1.5 0 003.5 22h17a1.5 1.5 0 001.5-1.5v-17A1.5 1.5 0 0020.5 2zM8 19H5v-9h3zM6.5 8.25A1.75 1.75 0 118.3 6.5a1.78 1.78 0 01-1.8 1.75zM19 19h-3v-4.74c0-1.42-.6-1.93-1.38-1.93A1.74 1.74 0 0013 14.19a.66.66 0 000 .14V19h-3v-9h2.9v1.3a3.11 3.11 0 012.7-1.4c1.55 0 3.36.86 3.36 3.66z"></path>
                                </svg>
                            </span>
                            <input name="socialinput" type="text" id="linkedinname" placeholder="Enter LinkedIn username"/>
                        </div>
                        <div class="socialIcons" id="facebook" style="display: none;">
                            <span title="Facebook">
                                <svg viewBox="0 0 36 36" class="" style="" fill="white" height="24" width="24">
                                    <path d="M20.181 35.87C29.094 34.791 36 27.202 36 18c0-9.941-8.059-18-18-18S0 8.059 0 18c0 8.442 5.811 15.526 13.652 17.471L14 34h5.5l.681 1.87Z"></path><path style="fill: black;" d="M13.651 35.471v-11.97H9.936V18h3.715v-2.37c0-6.127 2.772-8.964 8.784-8.964 1.138 0 3.103.223 3.91.446v4.983c-.425-.043-1.167-.065-2.081-.065-2.952 0-4.09 1.116-4.09 4.025V18h5.883l-1.008 5.5h-4.867v12.37a18.183 18.183 0 0 1-6.53-.399Z"></path>
                                </svg>
                            </span>
                            <input name="socialinput" type="text" id="facebookname" placeholder="Enter Facebook username"/>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="CreateSocial" class="btn btn-primary">Add Social</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="AddUrlModal" tabindex="-1" aria-labelledby="AddUrlModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="link-name" class="col-form-label">Link Name:</label>
                        <input type="text" class="form-control" id="link-name">
                    </div>
                    <div class="mb-3">
                        <label for="link-text" class="col-form-label">Link:</label>
                        <input type="url" class="form-control" id="link-text"></input>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="CreateLink" class="btn btn-primary">Create Link</button>
            </div>
        </div>
    </div>
</div>



@if (Model.Products.Count > 0)
{
    <div class="cards" id="imx0o">
        @foreach (var item in Model.Products)
        {
            <a class="btn" href="https://google.com" alt="@item.Uid">
                <div class="card">
                    <div class="card-header" style="background-image: url(@item.PreviewImage);">
                        <div style="right: 0; bottom: 0;position: absolute; margin: 3px; font-weight: bolder; font-size: larger;">@item.Price</div>
                    </div>
                    <div class="card-body">
                        <div class="card-title">
                            @item.Title
                        </div>
                        <div class="card-sub-title">
                            @item.SubTitle
                        </div>
                        <div class="card-desc">
                            @item.Description
                        </div>
                    </div>
                </div>
            </a>
        }
    </div>
}

@if (Model.YouTubeLinks.Count > 0)
{
    <div class="cards" id="imx0o">
        @foreach (var item in Model.YouTubeLinks)
        {
            <div class="card">
                <div class="card-header-youtube">
                    <iframe allowfullscreen="" frameborder="0" height="@item.Height" width="@item.Width" src="@item.Link"></iframe>
                </div>
                <div class="card-body">
                    <div class="card-title">
                        @item.Title
                    </div>
                    <div class="card-desc">
                        @item.Description
                    </div>
                </div>
            </div>
        }
    </div>
}

@section Scripts
{
    <script>

        function socialFilter() {
            let input, filter, cards, i;
            input = document.getElementById("SearchSocial");
            filter = input.value.toUpperCase(); 
            cards = document.getElementsByClassName("socialIcons");
            for (i = 0; i < cards.length; i++) {
                if (cards[i].id.toUpperCase().indexOf(filter) > -1) {
                    cards[i].style.display = "";
                } else {
                    cards[i].style.display = "none";
                }
            }
        }
        
        const createLink = document.getElementById('CreateLink');
        createLink.addEventListener("mousedown", submitLink);
        const createSocial = document.getElementById('CreateSocial');

        createSocial.addEventListener("mousedown", submitSocial);
        
        function submitSocial() {
            const socialInputs = document.querySelectorAll('input[name="socialinput"]');
             
            for (let i = 0; i < socialInputs.length; i++) {
                if (isNullOrWhiteSpace(socialInputs[i].value)) {
                    continue;
                }

                let data = new FormData();
                data.append('UserName', socialInputs[i].value);
                data.append('Name', socialInputs[i].id.replace("name", ""));
                data.append('Icon', document.querySelector(`#${socialInputs[i].id}`).parentElement.querySelector("span").innerHTML);
                data.append('Url', `https://www.${socialInputs[i].id.replace("name", "")}.com/${socialInputs[i].value}`);

                let xhr = new XMLHttpRequest();
                xhr.open('POST', '@Url.RouteUrl("AddSocialLink")', true);
                xhr.onload = function () {
                    // do something to response
                    let idCheck = socialInputs[i].id.replace("name", "");
                    let sociallinkCheck = document.querySelector(`#${idCheck}link`);
                    if (sociallinkCheck) {
                        sociallinkCheck.insertAdjacentHTML('beforebegin', this.responseText);
                        sociallinkCheck.remove();
                    } else {
                        console.log(this.responseText);
                        sociallinks.insertAdjacentHTML('beforeend', this.responseText);
                    }
                };
                xhr.send(data);
                socialInputs[i].value = "";
                break;
            } 
        }

        const sociallinks = document.querySelector('.sociallinks');
        const bioText = document.getElementById('bio');
        bioText.addEventListener("change", submitbio);
        const urllink = document.getElementById('urllink'); 
        const urlname = document.getElementById('urlname'); 
        const urllinks = document.querySelector('.urllinks');
        const dropdownMenu = document.querySelector('.dropdown-menu');

        const deletelink = document.querySelectorAll('.deletelink');
        for (let i = 0; i < deletelink.length; i++) {
            deletelink[i].addEventListener("click", deleteLink);
        }
        const deleteSocial = document.querySelectorAll('.deleteSocial');

        for (let i = 0; i < deleteSocial.length; i++) {
            deleteSocial[i].addEventListener("click", deleteSocialLink);
        }

        function deleteSocialLink(e) {
            let data = new FormData();
            data.append('Body', e.id);

            let xhr = new XMLHttpRequest();
            xhr.open('PATCH', '@Url.RouteUrl("DeleteSocial")', true);
            xhr.onload = function (response) {
                if (response.target.status === 204) {
                    let classId = e.id + "_link";
                    const sociallinks = document.getElementsByClassName(classId);
                    for (let i = 0; i < sociallinks.length; i++) {
                        sociallinks[i].remove();
                    }

                    return;
                }
                console.log(response.target.response);
            };
            xhr.send(data);
        }
        function deleteLink(e){
            let data = new FormData();
            data.append('Body', e.id);
            let xhr = new XMLHttpRequest();
            xhr.open('PATCH', '@Url.RouteUrl("DeleteLink")', true);
            xhr.onload = function (response) {
                if (response.target.status === 204) {
                    let classId = e.id + "_link";
                    console.log(classId);
                    const sociallinks = document.getElementsByClassName(classId);
                    for (let i = 0; i < sociallinks.length; i++) {
                        sociallinks[i].remove();
                    }
                    return;
                } 
            console.log(response.target.response);
        };
        xhr.send(data);
    }
    
        bioText.addEventListener("change", submitbio);
        function submitbio(e) { 
        if (isNullOrWhiteSpace(e.target.value)) {
            return;
        }
            let data = new FormData();
            data.append('Body', e.target.value);

            let xhr = new XMLHttpRequest();
            xhr.open('POST', '@Url.RouteUrl("AddBio")', true);
            xhr.onload = function (response) {
                if (response.target.status === 200) {
                    let bioBorder = bioText.style.borderColor;
                    bioText.style.borderColor = "green";
                    const biofield = document.getElementById('biofield');
                    let biofieldBorder = biofield.style.borderColor;
                    biofield.style.borderColor = "green";
                    const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))
                    const resetBorderColor = async () => {
                        await sleep(500)
                        bioText.style.borderColor = bioBorder;
                        biofield.style.borderColor = biofieldBorder;
                    }
                    resetBorderColor();
                    console.log(response.target.response);
                    return;
                }

                let bioBorder = bioText.style.borderColor;
                bioText.style.borderColor = "red";
                const biofield = document.getElementById('biofield');
                let biofieldBorder = biofield.style.borderColor;
                biofield.style.borderColor = "red";
                const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))
                const resetBorderColor = async () => {
                    await sleep(500)
                    bioText.style.borderColor = bioBorder;
                    biofield.style.borderColor = biofieldBorder;
                    bioText.focus();
                }
                resetBorderColor();
                console.log(response.target.response);
            };
            xhr.send(data);
        }
        function submitLink() { 
            const dropdownMenus = document.querySelectorAll('.show');
            let linktext = document.getElementById('link-text');
            let linkname = document.getElementById('link-name');
            
            if (isNullOrWhiteSpace(linktext.value) || isNullOrWhiteSpace(linkname.value)) {
                let existingBorder = linktext.style.borderColor;
                if (isNullOrWhiteSpace(linktext.value)) {
                    linktext.style.borderColor = "red";
                }
                if (isNullOrWhiteSpace(linkname.value)) {
                    linkname.style.borderColor = "red";
                }
                setTimeout(() => {
                    linktext.style.borderColor = existingBorder;
                    linkname.style.borderColor = existingBorder;
                }, 500);
                return;
            } 
            let data = new FormData();
            data.append('Name', linkname.value);
            data.append('Url', linktext.value);

            let xhr = new XMLHttpRequest();
            xhr.open('POST', '@Url.RouteUrl("AddLink")', true);
            xhr.onload = function (response) {
                if (response.target.status === 200) {
                    for (let i = 0; i < dropdownMenus.length; i++) {
                        dropdownMenus[i].classList.remove("show");
                    }
                    urllinks.insertAdjacentHTML('beforeend', this.responseText);
                    linktext.value = "";
                    linkname.value = "";
                    return; 
                }

                let addUrlModal = document.getElementById('AddUrlModal');
                let existingModalBorder = addUrlModal.style.borderColor;
                addUrlModal.style.borderColor = "red";
                setTimeout(() => {
                    addUrlModal.style.borderColor = existingModalBorder;
                }, 500);
            };
            xhr.send(data);
        } 
        
        function isNullOrWhiteSpace(str){ 
            let result = !str || str.length === 0 || /^\s*$/.test(str); 
            return result;
        }
         
        function getRoundedCanvas(sourceCanvas) {
            let canvas = document.createElement('canvas');
            let context = canvas.getContext('2d');
            let width = sourceCanvas.width;
            let height = sourceCanvas.height;

            canvas.width = width;
            canvas.height = height;
            context.imageSmoothingEnabled = true;
            context.drawImage(sourceCanvas, 0, 0, width, height);
            context.globalCompositeOperation = 'destination-in';
            context.beginPath();
            context.arc(width / 2, height / 2, Math.min(width, height) / 2, 0, 2 * Math.PI, true);
            context.fill();
            return canvas;
        } 
        window.addEventListener('DOMContentLoaded', function () {
        let avatar = document.getElementById('avatar');
        let image = document.getElementById('image');
        let input = document.getElementById('input');
        let $progress = $('.progress');
        let $progressBar = $('.progress-bar');
        let $alert = $('.alert');
            let $modal = $('#modal');
            let cropper;
            $progress.hide();
        $('[data-toggle="tooltip"]').tooltip();

        input.addEventListener('change', function (e) {
            let files = e.target.files;
            let done = function (url) {
                input.value = '';
                image.src = url;
                $alert.hide();
                $modal.modal('show');
            };
            let reader;
            let file;
            let url;

            if (files && files.length > 0) {
                file = files[0];

                if (URL) {
                    done(URL.createObjectURL(file));
                } else if (FileReader) {
                    reader = new FileReader();
                    reader.onload = function (e) {
                        done(reader.result);
                    };
                    reader.readAsDataURL(file);
                }
            }
        });

        $modal.on('shown.bs.modal', function () {
            cropper = new Cropper(image, {
                dragMode: 'move',
                aspectRatio: 1,
                viewMode: 1,
                restore: false,
                guides: false,
                center: false,
                cropBoxMovable: false,
                cropBoxResizable: false,
                toggleDragModeOnDblclick: false,
                ready: function () {
                    croppable = true;
                },
            });
        }).on('hidden.bs.modal', function () {
            cropper.destroy();
            cropper = null;
        });
        function removeAlert() {
            $alert.fadeOut();
        }
        document.getElementById('crop').addEventListener('click', function () {
            let initialAvatarURL;
            let canvas;
            let roundedCanvas;
            let roundedImage;

            $modal.modal('hide');

            if (cropper) {
                canvas = cropper.getCroppedCanvas({
                    width: 160,
                    height: 160,
                });
                roundedCanvas = getRoundedCanvas(canvas);
                initialAvatarURL = avatar.src;
                avatar.src = roundedCanvas.toDataURL();
                $progress.show();
                $alert.removeClass('alert-success alert-warning');
                roundedCanvas.toBlob(function (blob) {
                    let formData = new FormData();

                    formData.append('avatar', blob, 'avatar.png');
                    $.ajax('@Url.RouteUrl("AddAvatar")', {
                        method: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,

                        xhr: function () {
                            let xhr = new XMLHttpRequest();

                            xhr.upload.onprogress = function (e) {
                                let percent = '0';
                                let percentage = '0%';

                                if (e.lengthComputable) {
                                    percent = Math.round((e.loaded / e.total) * 100);
                                    percentage = percent + '%';
                                    $progressBar.width(percentage).attr('aria-valuenow', percent).text(percentage);
                                }
                            };

                            return xhr;
                        },

                        success: function () {
                            $alert.show().addClass('alert-success').text('Upload success');
                        },

                        error: function () {
                            avatar.src = initialAvatarURL;
                            $alert.show().addClass('alert-warning').text('Upload error');
                        },

                        complete: function () {
                            $progress.hide();
                            setTimeout(removeAlert, 1500);
                        },
                    });
                });
            }
        });
    });
 
    </script>
}